// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Music.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Music.Migrations
{
    [DbContext(typeof(MusicApplicationContext))]
    [Migration("20240730072147_YoutubeUrl")]
    partial class YoutubeUrl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Music.Models.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaRelease_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("total_tracks")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Music.Models.Artist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SongId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("SongId");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("Music.Models.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .HasColumnType("text");

                    b.Property<string>("SongId")
                        .HasColumnType("text");

                    b.Property<int>("height")
                        .HasColumnType("integer");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("SongId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Music.Models.Song", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .HasColumnType("text");

                    b.Property<string>("File_path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Release_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("YoutubeUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("durations_ms")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Music.Models.Artist", b =>
                {
                    b.HasOne("Music.Models.Album", null)
                        .WithMany("Artists")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Music.Models.Song", null)
                        .WithMany("Artists")
                        .HasForeignKey("SongId");
                });

            modelBuilder.Entity("Music.Models.Image", b =>
                {
                    b.HasOne("Music.Models.Album", null)
                        .WithMany("Images")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Music.Models.Song", null)
                        .WithMany("Images")
                        .HasForeignKey("SongId");
                });

            modelBuilder.Entity("Music.Models.Song", b =>
                {
                    b.HasOne("Music.Models.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Music.Models.Album", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Images");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Music.Models.Song", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
